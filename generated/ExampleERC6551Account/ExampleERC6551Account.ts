// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ZkProofsVerified extends ethereum.Event {
  get params(): ZkProofsVerified__Params {
    return new ZkProofsVerified__Params(this);
  }
}

export class ZkProofsVerified__Params {
  _event: ZkProofsVerified;

  constructor(event: ZkProofsVerified) {
    this._event = event;
  }

  get newGroupIds(): Array<Bytes> {
    return this._event.parameters[0].value.toBytesArray();
  }
}

export class zkPreferencesAdded extends ethereum.Event {
  get params(): zkPreferencesAdded__Params {
    return new zkPreferencesAdded__Params(this);
  }
}

export class zkPreferencesAdded__Params {
  _event: zkPreferencesAdded;

  constructor(event: zkPreferencesAdded) {
    this._event = event;
  }

  get newPreferences(): Array<Bytes> {
    return this._event.parameters[0].value.toBytesArray();
  }
}

export class ExampleERC6551Account__configResultValue0Struct extends ethereum.Tuple {
  get appId(): Bytes {
    return this[0].toBytes();
  }

  get vault(): ExampleERC6551Account__configResultValue0VaultStruct {
    return changetype<ExampleERC6551Account__configResultValue0VaultStruct>(
      this[1].toTuple()
    );
  }
}

export class ExampleERC6551Account__configResultValue0VaultStruct extends ethereum.Tuple {
  get isImpersonationMode(): boolean {
    return this[0].toBoolean();
  }
}

export class ExampleERC6551Account__tokenResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;

  constructor(value0: BigInt, value1: Address, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getChainId(): BigInt {
    return this.value0;
  }

  getTokenContract(): Address {
    return this.value1;
  }

  getTokenId(): BigInt {
    return this.value2;
  }
}

export class ExampleERC6551Account extends ethereum.SmartContract {
  static bind(address: Address): ExampleERC6551Account {
    return new ExampleERC6551Account("ExampleERC6551Account", address);
  }

  ADDRESSES_PROVIDER_V2(): Address {
    let result = super.call(
      "ADDRESSES_PROVIDER_V2",
      "ADDRESSES_PROVIDER_V2():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_ADDRESSES_PROVIDER_V2(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ADDRESSES_PROVIDER_V2",
      "ADDRESSES_PROVIDER_V2():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  APP_ID(): Bytes {
    let result = super.call("APP_ID", "APP_ID():(bytes16)", []);

    return result[0].toBytes();
  }

  try_APP_ID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("APP_ID", "APP_ID():(bytes16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  IS_IMPERSONATION_MODE(): boolean {
    let result = super.call(
      "IS_IMPERSONATION_MODE",
      "IS_IMPERSONATION_MODE():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_IS_IMPERSONATION_MODE(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "IS_IMPERSONATION_MODE",
      "IS_IMPERSONATION_MODE():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  SISMO_CONNECT_LIB_VERSION(): BigInt {
    let result = super.call(
      "SISMO_CONNECT_LIB_VERSION",
      "SISMO_CONNECT_LIB_VERSION():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_SISMO_CONNECT_LIB_VERSION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "SISMO_CONNECT_LIB_VERSION",
      "SISMO_CONNECT_LIB_VERSION():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  config(): ExampleERC6551Account__configResultValue0Struct {
    let result = super.call("config", "config():((bytes16,(bool)))", []);

    return changetype<ExampleERC6551Account__configResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_config(): ethereum.CallResult<
    ExampleERC6551Account__configResultValue0Struct
  > {
    let result = super.tryCall("config", "config():((bytes16,(bool)))", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ExampleERC6551Account__configResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  groupIdPreferences(param0: Bytes): boolean {
    let result = super.call(
      "groupIdPreferences",
      "groupIdPreferences(bytes16):(bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBoolean();
  }

  try_groupIdPreferences(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "groupIdPreferences",
      "groupIdPreferences(bytes16):(bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isValidSignature(hash: Bytes, signature: Bytes): Bytes {
    let result = super.call(
      "isValidSignature",
      "isValidSignature(bytes32,bytes):(bytes4)",
      [ethereum.Value.fromFixedBytes(hash), ethereum.Value.fromBytes(signature)]
    );

    return result[0].toBytes();
  }

  try_isValidSignature(
    hash: Bytes,
    signature: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "isValidSignature",
      "isValidSignature(bytes32,bytes):(bytes4)",
      [ethereum.Value.fromFixedBytes(hash), ethereum.Value.fromBytes(signature)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  nonce(): BigInt {
    let result = super.call("nonce", "nonce():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nonce(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonce", "nonce():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  token(): ExampleERC6551Account__tokenResult {
    let result = super.call("token", "token():(uint256,address,uint256)", []);

    return new ExampleERC6551Account__tokenResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt()
    );
  }

  try_token(): ethereum.CallResult<ExampleERC6551Account__tokenResult> {
    let result = super.tryCall(
      "token",
      "token():(uint256,address,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ExampleERC6551Account__tokenResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt()
      )
    );
  }

  verifiedGroupIds(param0: Bytes): boolean {
    let result = super.call(
      "verifiedGroupIds",
      "verifiedGroupIds(bytes16):(bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBoolean();
  }

  try_verifiedGroupIds(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verifiedGroupIds",
      "verifiedGroupIds(bytes16):(bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddzkPreferencesCall extends ethereum.Call {
  get inputs(): AddzkPreferencesCall__Inputs {
    return new AddzkPreferencesCall__Inputs(this);
  }

  get outputs(): AddzkPreferencesCall__Outputs {
    return new AddzkPreferencesCall__Outputs(this);
  }
}

export class AddzkPreferencesCall__Inputs {
  _call: AddzkPreferencesCall;

  constructor(call: AddzkPreferencesCall) {
    this._call = call;
  }

  get groupIds(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class AddzkPreferencesCall__Outputs {
  _call: AddzkPreferencesCall;

  constructor(call: AddzkPreferencesCall) {
    this._call = call;
  }
}

export class ExecuteCallCall extends ethereum.Call {
  get inputs(): ExecuteCallCall__Inputs {
    return new ExecuteCallCall__Inputs(this);
  }

  get outputs(): ExecuteCallCall__Outputs {
    return new ExecuteCallCall__Outputs(this);
  }
}

export class ExecuteCallCall__Inputs {
  _call: ExecuteCallCall;

  constructor(call: ExecuteCallCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class ExecuteCallCall__Outputs {
  _call: ExecuteCallCall;

  constructor(call: ExecuteCallCall) {
    this._call = call;
  }

  get result(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class VerifyFakezkProofsCall extends ethereum.Call {
  get inputs(): VerifyFakezkProofsCall__Inputs {
    return new VerifyFakezkProofsCall__Inputs(this);
  }

  get outputs(): VerifyFakezkProofsCall__Outputs {
    return new VerifyFakezkProofsCall__Outputs(this);
  }
}

export class VerifyFakezkProofsCall__Inputs {
  _call: VerifyFakezkProofsCall;

  constructor(call: VerifyFakezkProofsCall) {
    this._call = call;
  }

  get groupIds(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class VerifyFakezkProofsCall__Outputs {
  _call: VerifyFakezkProofsCall;

  constructor(call: VerifyFakezkProofsCall) {
    this._call = call;
  }
}

export class VerifyzkProofsCall extends ethereum.Call {
  get inputs(): VerifyzkProofsCall__Inputs {
    return new VerifyzkProofsCall__Inputs(this);
  }

  get outputs(): VerifyzkProofsCall__Outputs {
    return new VerifyzkProofsCall__Outputs(this);
  }
}

export class VerifyzkProofsCall__Inputs {
  _call: VerifyzkProofsCall;

  constructor(call: VerifyzkProofsCall) {
    this._call = call;
  }

  get response(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get groupIds(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }
}

export class VerifyzkProofsCall__Outputs {
  _call: VerifyzkProofsCall;

  constructor(call: VerifyzkProofsCall) {
    this._call = call;
  }
}
